#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STRING_LENGTH 100

struct node 
{
    char data[MAX_STRING_LENGTH];
    int is_completed;
    struct node *next;
};

void add_node(struct node **start, struct node **temp) 
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    if (new_node == NULL) 
    {
        printf("Memory allocation failed.\n");
        return;
    }

    printf("Enter data for the new node: ");
    scanf(" %[^\n]s", new_node->data); 

    new_node->is_completed = 0; 
    new_node->next = NULL;

    if (*start == NULL) 
    {
        *start = new_node;
        *temp = *start;
    } 
    else 
    {
        (*temp)->next = new_node;
        *temp = (*temp)->next;
    }
}

void delete_node(struct node **start, char *data_to_delete) 
{
    struct node *temp = *start, *prev = NULL;

    while (temp != NULL && strcmp(temp->data, data_to_delete) != 0) 
    {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) 
    {
        printf("Node with data '%s' not found.\n", data_to_delete);
        return;
    }

    if (prev == NULL) 
    {
        *start = temp->next;
    } 
    else 
    {
        prev->next = temp->next;
    }

    free(temp);
    printf("Node with data '%s' deleted.\n", data_to_delete);
}

void mark_as_complete(struct node *start, char *data_to_mark) 
{
    struct node *temp = start;

    while (temp != NULL && strcmp(temp->data, data_to_mark) != 0) 
    {
        temp = temp->next;
    }

    if (temp == NULL) 
    {
        printf("Node with data '%s' not found.\n", data_to_mark);
        return;
    }

    temp->is_completed = 1;
    printf("Node with data '%s' marked as completed.\n", data_to_mark);
}

void display_list(struct node *start) 
{
    struct node *temp = start;
    printf("The linked list is:\n");
    while (temp != NULL) 
    {
        printf("%s [%s]\n", temp->data, temp->is_completed ? "Completed" : "Not Completed");
        temp = temp->next;
    }
}

int main() 
{
    struct node *start = NULL, *temp = NULL;
    int choice;

    while (1) 
    {
        printf("1 to add task \n2 to delete a task\n3 to display the task list\n4 to mark a task as completed\n5 to exit\nEnter your choice:");
        scanf("%d", &choice);

        if (choice == 1) 
        {
            add_node(&start, &temp);
        } 
        else if (choice == 2) 
        {
            char data_to_delete[MAX_STRING_LENGTH];
            printf("Enter the data of the node to delete: ");
            scanf(" %[^\n]s", data_to_delete);
            delete_node(&start, data_to_delete);
        } 
        else if (choice == 3) 
        {
            display_list(start);
        } 
        else if (choice == 4) 
        {
            char data_to_mark[MAX_STRING_LENGTH];
            printf("Enter the data of the node to mark as completed: ");
            scanf(" %[^\n]s", data_to_mark);
            mark_as_complete(start, data_to_mark);
        } 
        else if (choice == 5) 
        {
            break;
        } 
        else 
        {
            printf("Invalid choice.\n");
        }
    }

    while (start != NULL) 
    {
        temp = start;
        start = start->next;
        free(temp);
    }

    return 0;
}
